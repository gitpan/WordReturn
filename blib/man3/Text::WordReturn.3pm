.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jul 11 15:55:36 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "WordReturn 3"
.TH WordReturn 3 "perl v5.6.0" "2001-07-11" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Text::WordReturn \- A Perl module that quickly identifies words and phrases in documents and returns the number of times they appear within the document.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Text::WordReturn;
.Ve
.Vb 2
\&    $n= new->WordReturn();
\&    $n->getWords("file", "on", "2");
.Ve
.Vb 1
\&    # or
.Ve
.Vb 1
\&    $n->getPhrases("file", "on", "2", "3");
.Ve
.Vb 1
\&    # or if LWP is installed
.Ve
.Vb 1
\&    $n->getWords("http://some.url.com", "on", "3");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\&    WordReturn provides a quick way to retrieve a list of words or phrases in a document and
\&    returns the number of times they appear within the document. The ability to weigh words based on their location in the document (or between specified xml/html tags).
\&    This module can be useful for search and "more like this" type of applications, such as Web based Usenet archives.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.if n .Sh "getWords(""file"", ""html"", ""number of times"", ""stopwords"")"
.el .Sh "getWords(``file'', ``html'', ``number of times'', ``stopwords'')"
.IX Subsection "getWords("file, html, number of times, stopwords)"
getWords returns a reference to a hash containing the 
words in a document and the number of times each word appears within the document.
.PP
getWords takes the following arguments:
.PP
\&\fBfile\fR \- Either the name of a file, or a \s-1URL\s0 (\s-1IF\s0 \s-1LWP\s0 is installed).
.PP
\&\fBhtml\fR \- 'on' or 'off' \- off (default if left blank) or on.  On strips the \s-1HTML\s0 from a document, off leaves the \s-1HTML\s0 there.
.PP
\&\fBnumber of times\fR the word needs to appear to be returned.  The default is 2.
.PP
\&\fBstopwords\fR \- 'on','off' or 'filename'  \- use built-in, use none, or supply a file (words should be separated by spaces or one word per line)  Default is on.
.Sh "Example:"
.IX Subsection "Example:"
$list=getWords(\*(L"file.txt\*(R", \*(L"on\*(R", \*(L"3\*(R", \*(L"on\*(R");
.PP
$list is a reference to a hash that contains the words in file.txt that appear 3 times or more, any html is 
stripped, and the built-in stop words are used.
.if n .Sh "weightWords(""file"", ""html"", ""number of times"", ""stopwords"", ""tag,tag,tag"")"
.el .Sh "weightWords(``file'', ``html'', ``number of times'', ``stopwords'', ``tag,tag,tag'')"
.IX Subsection "weightWords("file, html, number of times, stopwords, tag,tag,tag)"
weightWords returns a reference to a hash containing the 
words in a document and the weighted value for that word.
.PP
weightWords takes the following arguments:
.PP
\&\fBfile\fR \- Either the name of a file, or a \s-1URL\s0 (\s-1IF\s0 \s-1LWP\s0 is installed)
.PP
\&\fBhtml\fR \- 'on' or 'off' \- off (default if left blank) or on.  On strips the \s-1HTML\s0 from a document, off leaves the \s-1HTML\s0 there.
.PP
\&\fBnumber of times\fR the word needs to appear to be returned.  The default is 2.
.PP
\&\fBstopwords\fR \- 'on','off' or 'filename'  \- use built-in, use none, or supply a file (words should be separated by spaces or one word per line)  Default is on.
.PP
\&\fBtag\fR \- words appearing between these specified tags will get a higher value (1.2).
.PP
The top 100 words of a document are also given a higher value (1.1).
.Sh "Example:"
.IX Subsection "Example:"
$list=weightWords(\*(L"file.txt\*(R", \*(L"on\*(R", \*(L"3\*(R", \*(L"on\*(R", \*(L"title,h2\*(R");
.PP
$list is a reference to a hash that contains the words in file.txt that appear 3 times or more, any html is 
stripped, and the built-in stop words are used.
.if n .Sh "getPhrases(""file"", ""html"", ""number of times"", ""number of words"", ""meta"")"
.el .Sh "getPhrases(``file'', ``html'', ``number of times'', ``number of words'', ``meta'')"
.IX Subsection "getPhrases("file, html, number of times, number of words, meta)"
getPhrases returns a reference to a hash containing the 
phrases in a document and the number of times each phrase appears within the document.
.PP
getPhrases takes the following arguments:
.PP
\&\fBfile\fR \- Either the name of a file, or a \s-1URL\s0 (if \s-1LWP\s0 is installed).
.PP
\&\fBhtml\fR \- 'on' or 'off' \-off (default if left blank) or on.  On strips the \s-1HTML\s0 from a document, Off leaves the \s-1HTML\s0 there.
.PP
\&\fBnumber of times\fR the phrase needs to appear to be returned.  The default is 2.
.PP
\&\fBnumber of words\fR in a phrase, default is 2.
.PP
\&\fBstopwords\fR \- 'on','off' or 'filename'  \- use built-in, use none, or supply a file (words should be separated by spaces or one word per line)  Default is on.
.Sh "Example:"
.IX Subsection "Example:"
$list=getPhrases(\*(L"file.txt\*(R", \*(L"on\*(R", \*(L"3\*(R", \*(L"2\*(R", \*(L"on\*(R");
.PP
$list is a reference to a hash that contains the phrases in file.txt that appear 3 times or more, contain a minimium of 2 words and any html is 
stripped, and built-in stop words are used. 
.SH "MORE EXAMPLES"
.IX Header "MORE EXAMPLES"
Retrieve any word that appears 3 more more times from www.linux.org.
.PP
use Text::WordReturn;
\&\f(CW$n\fR=WordReturn->\fInew()\fR;
\&\f(CW$list\fR=$n->getWords(\*(L"http://www.linux.org\*(R", \*(L"off\*(R",\*(L"3\*(R");
.PP
%h=%{$list};
foreach $k(keys  \f(CW%h\fR){
        print \*(L"$k \- \f(CW$h\fR{$k}\en\*(R";
}                    
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Mark Griskey <mark@linuxhardware.net>
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
=cut
